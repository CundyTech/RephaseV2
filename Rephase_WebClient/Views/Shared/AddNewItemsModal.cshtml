<style>
    /* Style the form */
    #file-upload-wrapper {
        background-color: #ffffff;
        margin: 100px auto;
        padding: 40px;
        min-width: 300px;
        position: absolute;
        border: black solid 1px;
        z-index: 999;
        left: 0;
        right: 0;
        margin-left: auto;
        margin-right: auto;
        width: 500px; /* Need a specific value to work */
    }

    /* Style the input fields */
    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        font-family: Raleway;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        /* Mark the active step: */
        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }


    .tg {
        border-collapse: collapse;
        border-color: #ccc;
        border-spacing: 0;
    }

        .tg td {
            background-color: #fff;
            border-color: #ccc;
            border-style: solid;
            border-width: 1px;
            color: #333;
            font-family: Arial, sans-serif;
            font-size: 14px;
            overflow: hidden;
            padding: 10px 5px;
            word-break: normal;
        }

        .tg th {
            background-color: #f0f0f0;
            border-color: #ccc;
            border-style: solid;
            border-width: 1px;
            color: #333;
            font-family: Arial, sans-serif;
            font-size: 14px;
            font-weight: normal;
            overflow: hidden;
            padding: 10px 5px;
            word-break: normal;
        }

        .tg .tg-j1i3 {
            border-color: inherit;
            position: -webkit-sticky;
            position: sticky;
            text-align: left;
            top: -1px;
            vertical-align: top;
            will-change: transform
        }

        .tg .tg-0pky {
            border-color: inherit;
            text-align: left;
            vertical-align: top
        }

    #item-preview-wrapper {
        overflow-y: auto;
        height: 200px;
    }
</style>


<div id="AddNewItemsModal" class="hidden">
    <div id="file-upload-wrapper">
        <h4>Add New Items</h4>
        @using (Html.BeginForm("Upload", "NewItem", FormMethod.Post, new { id = "file-upload", enctype = "multipart/form-data" }))
        {
            <!-- One "tab" for each step in the form: -->
            <div class="tab">
                <dl>
                    <dd>
                        <input type="file" name="files" multiple>
                    </dd>
                </dl>
            </div>
            <div class="tab">
                <div id="item-preview-wrapper">
                    <table id="item-preview" class="tg">
                        <thead>
                            <tr>
                                <th class="tg-ul38">Preview</th>
                                <th class="tg-ul38">File Name</th>
                                <th class="tg-ul38">Display Name</th>
                                <th class="tg-ul38"></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                    <input id="new-items" type="hidden" novalidate name="NewItems" value="">
                </div>
            </div>
            <div class="tab">
              <div class="d-flex flex-justify-center flex-wrap m-2">
                    <select id="menu-item-insert-position" class="marg-5" data-role="select" data-filter="false" data-prepend="Insert:">
                        <option value="Before" selected>Before</option>
                        <option value="After">After</option>
                    </select>
                  <select id="menu-item-insert-selection" class="marg-5" data-role="select" data-filter="false" data-prepend="Menu Item:">
                      <option value="" selected>All</option>
                  </select>
                </div>
            </div>
        }

        <div style="margin: 20px">
            <div style="float:right;">
                <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
                <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
            </div>

            <!-- Circles which indicates the steps of the form: -->
            <div style="float: left;">
                <span class="step"></span>
                <span class="step"></span>
                <span class="step"></span>
            </div>

        </div>
    </div>
</div>
<script>
    $('#file-upload').change(function () {

        if (currentTab === 0) {

            var form = $('#file-upload')[0];
            var files = form[0].files;

            for (var i = 0; i < files.length; i++) {
                $("#item-preview").append(`<tr><td><img id="${files[i].name}" width="100" height="50"/></td><td>${files[i].name}</td><td><input></input></td><td><button>X</button></td></tr>`);
                document.getElementById(`${files[i].name}`).src = window.URL.createObjectURL(files[i]);
            }
        }
    });

    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form ...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        // ... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        // ... and run a function that displays the correct step indicator:
        fixStepIndicator(n);
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form... :
        if (currentTab >= x.length) {

            var rows = $('#item-preview > tbody > tr');

            var newItems = [];
            for (var i = 0; i < rows.length; i++) {
                newItems.push({ Id: null, ImageUrl: `${$(rows[i].cells[1]).text()}`, Title: `${$(rows[i].cells[2].firstChild).val()}`, LocalImagePath: `${$(rows[i].cells[3]).text()}`, Child: null });
            }

            $("#new-items").val(JSON.stringify(newItems));
            var newItems = $("#new-items").val();

            InsertNewMenuItemsBefore(newItems);

            //...the form gets submitted:
            document.getElementById("file-upload").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...

            var validate = y[i].hasAttribute('novalidate');
            if (!validate && y[i].value === "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false:
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class to the current step:
        x[n].className += " active";
    }

    function populateInsertDropdown(source) {

        for (var i = 0; i <= source.length; i++){
            var opt = document.createElement('option');
            opt.value = i;
            opt.innerHTML = i;
            $("#menu-item-insert-selection").appendChild(opt);
        }
    }
</script>